#include "includes.hpp"
#include "offsets.hpp"
#include "memory_access.hpp"
#include "GameStatus.hpp"
#include "hook.hpp"

/*
typedef HRESULT(APIENTRY* tEndScene) (LPDIRECT3DDEVICE9 pDevice);

int windowWidth, windowHeight;
HWND window;
BOOL CALLBACK enumWind(HWND handle, LPARAM lp) {
    DWORD procId;
    GetWindowThreadProcessId(handle, &procId);
    if (GetCurrentProcessId() != procId)
        return TRUE;

    window = handle;
    return FALSE;
}

HWND GetProcessWindow() {
    window = NULL;

    EnumWindows(enumWind, NULL);

    RECT size;
    GetWindowRect(window, &size);
    windowWidth = size.right - size.left;
    windowHeight = size.bottom - size.top;

    windowHeight -= 29; //remove window border
    windowWidth -= 5;

    return window;
}

bool getD3D9Device(void** pTable, size_t size) {
    if (!pTable)
        return false;

    IDirect3D9* pD3D = Direct3DCreate9(D3D_SDK_VERSION);
    if (!pD3D)
        return false;

    IDirect3DDevice9* pDummyDevice = nullptr;

    D3DPRESENT_PARAMETERS d3dpp = {};
    d3dpp.Windowed = false;
    d3dpp.SwapEffect = D3DSWAPEFFECT_DISCARD;
    d3dpp.hDeviceWindow = GetProcessWindow();

    HRESULT deummyDevCreated = pD3D->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, d3dpp.hDeviceWindow, D3DCREATE_SOFTWARE_VERTEXPROCESSING, &d3dpp, &pDummyDevice);

    if (deummyDevCreated != S_OK) {
        d3dpp.Windowed = !d3dpp.Windowed;
        HRESULT deummyDevCreated = pD3D->CreateDevice(D3DADAPTER_DEFAULT, D3DDEVTYPE_HAL, d3dpp.hDeviceWindow, D3DCREATE_SOFTWARE_VERTEXPROCESSING, &d3dpp, &pDummyDevice);
        if (deummyDevCreated != S_OK) {
            pD3D->Release();
            return false;
        }
    }

    memcpy(pTable, *(void***)(pDummyDevice), size);
    pDummyDevice->Release();
    pD3D->Release();
    return true;
}


void* d3d9Device[119];
BYTE EndSceneBytes[7]{ 0 };
tEndScene oEndScene = nullptr;
LPDIRECT3DDEVICE9 pDevice = nullptr;

void DrawFilledRect(int x, int y, int w, int h, D3DCOLOR col) {
    D3DRECT rect = { x, y, x + w, y + h };

    pDevice->Clear(1, &rect, D3DCLEAR_TARGET, col, 0, 0);

}

void APIENTRY hkEndScene(LPDIRECT3DDEVICE9 o_pDevice) {
    if (!pDevice)
        pDevice = o_pDevice;

    DrawFilledRect(25, 25, 100, 100, D3DCOLOR_ARGB(255, 255, 255, 255));


    oEndScene(pDevice);
}
*/
DWORD WINAPI MainThread(HMODULE hModule)
{
    //Create console to help with debugging process (crucial infromation can be displayed there)
    AllocConsole();
    FILE* f;
    freopen_s(&f, "CONOUT$", "w", stdout);

    //Verify proper console allocation
    std::cout << "Hack injected!\n";

    GameStatus game_status;

    //HOOOOOOOOK
    if (getD3D9Device(d3d9Device, sizeof(d3d9Device))) {
        memcpy(EndSceneBytes, (char*)d3d9Device[42], 7);

        oEndScene = (tEndScene)trampHook((char*)d3d9Device[42], (char*)hkEndScene, 7);
    }

    while (true)
    {
        //End thread by clicking END key on the keyboard
        if (GetAsyncKeyState(VK_END) & 1)
        {
            break;
        }

        //Read data from the game process memory
        int crosshair_id = game_status.get_crosshair_id(game_status.get_local_player());
        int crosshair_team = game_status.get_team(game_status.get_player(crosshair_id - 1));
        int local_team = game_status.get_team(game_status.get_local_player());

        if (crosshair_id > 0 && crosshair_id < 32 && local_team != crosshair_team)
        {
            if (GetAsyncKeyState(VK_MENU)) //Activate triggerbot while holding ALT key on the keyboard
            {
                mouse_event(MOUSEEVENTF_LEFTDOWN, NULL, NULL, 0, 0);
                mouse_event(MOUSEEVENTF_LEFTUP, NULL, NULL, 0, 0);
                Sleep(100);
            }
        }

    }

    //Inform about the end of the thread
    std::cout << "Hack closed!\n";

    //UNHOOK
    patch((BYTE*)d3d9Device[42], EndSceneBytes, 7);

    //Close console and thread
    fclose(f);
    FreeConsole();
    FreeLibraryAndExitThread(hModule, 0);
    return 0;
}

//dll main function. Creates new thread for our program
BOOL APIENTRY DllMain(HMODULE hModule, DWORD  ul_reason_for_call, LPVOID lpReserved)
{
    switch (ul_reason_for_call)
    {
    case DLL_PROCESS_ATTACH:
        CloseHandle(CreateThread(nullptr, 0, (LPTHREAD_START_ROUTINE)MainThread, hModule, 0, nullptr));
    case DLL_THREAD_ATTACH:
    case DLL_THREAD_DETACH:
    case DLL_PROCESS_DETACH:
        break;
    }
    return TRUE;
}